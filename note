

수업 노트 / 06-18 (화)



★ 트랜잭션 제대로 알아두기 
* 트랜잭션이란(Transaction) , 
데이터베이스의 상태를 변화시키기 해서 수행하는 작업의 단위
- 데이터베이스의 상태를 변화시킨다는 것은, 아래의 질의어(SQL)를 이용해 데이터베이스에 접근하는 것을 의미
(SELECT / INSERT / DELETE / UPDATE)


★ 스프링의 주요특징 
1. POJO 프로그래밍 기반의 구성
2. 의존성 주입 (DI) 을 통한 객체 간의 관계 구성
3. AOP (Aspect- Oriented-Programming) 지원
4. 편리한 mvc 구조
5. WAS 의 종속적이지 않은 개발 환경 

★ POJO (Plain Old Java Object) 
- java 로 생성하는 순수한 객체 (= 다른 기술을 사용하지 않는 순수한 JAVA 만을 사용해 만든 객체)
- 객체 지향적인 원리에 충실하며 환경과 기술에 종속되지 않고
필요에 따라 재활용될 수 있는 방식으로 설계된 object 를 의미.
- pojo 는 getter/ setter 를 가진 단순 자바 object 로 정의
- 의존성이 없고 추후 테스트 및 유지보수가 편리한 유연성의 장점을 지님 

★ 스프링 사골문제 ~ 
https://ittrue.tistory.com/234
- 프레임워크 
- DI / AOP / PSA 
- POJO
- Spring bean / bean container 


★ Spring Bean (Container)
- 스프링의 빈 컨테이너의 역할 
1) 스프링 객체를 관리한다. : 컨테이너가 스스로 객체를 생성한다
2) @ComponentScan : @Component 가 붙은 클래스들을 읽어서 객체로 생성한다 
3) @Bean : @bean 을 이용하여 개발자가 생성하는 코드를 작성한다. 

★ 스프링 프레임워크
-애플리케이션 프레임워크는 애플리케이션을 개발하는데 있어 필요한 모든 업무 분야 및 
모든 기술과 관련된 코드들의 뼈대를 제공한다. 

★ AOP
AOP는 애플리케이션 전반에 걸쳐 공통적으로 적용되는 코드들을
비즈니스 로직으로부터 분리해내는 것을 의미한다.


★ DI (Dependency Injection = 의존성 주입)
https://backendcode.tistory.com/249

의존성 주입이란, 객체가 서로 의존하는 관계가 되게 의존성을 주입하는 것
객체지향프로그램에서의 의존성이란, 하나의 객체가 어떠한 다른 객체를 사용하고 있음을 의미
= DI는 의존 객체를 특정 클래스에서 직접 생성하는 것이 아니라, 
외부로부터 주입해주는 것을 의미한다.


★ PSA (Portable Service Abstraction = 일관된 서비스 추상화)
- 스프링은 java 를 사용해 데이터베이스에 접근하는 방법을 
규정한 인터페이스를 제공하고 있으며 그걸 -> JDBC(Java Database Connectivity ) 라고 한다.

JDBC 처럼 특정 기술과 관련된 서비스를 추상화하여 일관된 방식으로 사용될 수 있도록 한 것을 
PSA(=일관된 서비스 추상화)라고 한다. 

PSA는 특정 기술과 관련된 서비스들을 추상화하여 일관된 방식으로 
사용할 수 있도록 한 것을 의미한다.


★ WebMVC와 WebFlux

WebMVC : 전통적인 멀티 쓰레드(thread) 기반의 웹 프레임워크
WebFlux : 리액티브 스택 기반의 웹 프레임워크   


★ Spring Boot Webflux
https://adjh54.tistory.com/232
반응형 및 비동기적 웹 애플리케이션을 지원하는 모듈이다
이 모듈은 Reactive Streams 사양을 기반으로 하며,
비동기적인 이벤트 지향 프로그래밍을 통해 높은 확장성과 성능을 제공한다.
-> webFlux 를 사용하는 목적은 반응형 프로그래밍을 통해 '높은 처리량'과 
'확장성'을 갖는 애플리케이션을 만드는 것을 목표로 한다. 

★ 프록시란? (Proxy) = 대리자 라는 뜻 ! 
https://velog.io/@dltkdgus1850/Spring-%ED%94%84%EB%A1%9D%EC%8B%9C%EB%9E%80
클라이어트가 사용하려고 하는 실제 대상인 것처럼 위장해서 클라이언트의 요청을 
받아주는 역할
- Spring AOP는 proxy 를 기반으로 한 Runtime Weaving 방식이다


orm / jpa 포트폴리오 할 때 어떤걸로 갈지 생각해보기 
https://velog.io/@jeong-god/ORM%EA%B3%BC-JPA%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C

==================================================================================


수업 노트 / 06-19 (수)

Spring DI (의존 관계 주입)
-> DI (Dependency Injection = 의존성 주입) 이라고 한다
- spring 에서 매우 중요한 핵심 

* 의존성이란?
-> 객체를 생성 및 사용함에 있어 의존 관계가 있는 경우를 말한다.

* DI (dependency Injection)
spring 은 3가지 핵심 프로그래밍 모델 (AOP, DI, IOC)를 지원하는데
그 중 하나가 DI 이다. Spring은 객체의 의존관계 주입을 통해 관리한다.

* Spring 에서의 DI 방법 3가지
- spring 4.3 이후 버전 부터는 생성자 주입 (Construct Injection)방법을 권장
<방법>
1) Construct Injection = 생성자 주입
2) Field Injection = 필드 주입
3) Setter Injection = Setter 주입 

* 인터페이스 (Interface)
- 인터페이스에는 처리({} 중괄호가 없다) = 추상 메소드라는 의미

* 추상 클래스는 extends / 인터페이스는 implements 라는 상속키워드를 사용한다
- extends = 확대(확장)하다
- implements = 시행/실행하다
 
추상 클래스(Abstract Class)
class 앞에 'abstract' 키워드를 사용하여 정의하며, 
하나 이상의 추상 메서드를 가지는 클래스를 말합니다. 추상 메서드를 선언하여 상속을 통해서 
하위 클래스에서 (반드시) 구현하도록 강제하는 클래스
추상 클래스는 하나 이상의 추상 메서드 가지고 있는 클래스를 말하며,
 추상 메서드를 포함하고 있다는 점을 제외하면 일반 클래스와 모든 점이 동일하다.(생성자, 필드(멤버 변수), 일반 메서드(멤버 메서드) 포함 가능)
 

추상 클래스는 인스턴스, 즉 객체를 만들 수 없는 클래스 입니다.(new 키워드로 객체 생성 불가(new 추상클래스() X))
추상 클래스는 상속 키워드로 extends를 사용합니다.(일반 클래스 상속과 동일)
추상 메소드는 (추상 클래스를 상속 받는)하위 클래스에서 메소드의 구현을 강제해야 합니다.(Override)
추상 메소드를 포함하는 클래스는 반드시 추상 클래스여야 합니다.
다중 상속이 불가능합니다.
출처: https://hahahoho5915.tistory.com/70 

Controller 와 항상 붙어 있는 것 -> @RequestMapping("/board/")

==================================================================================

* 스프링으로 게시판 만들기 
https://melonpeach.tistory.com/51

http://localhost:8080/sample/ex02List?ids=111&ids=222&ids=333
key값이 ids 로 동일 = 같은 이름의 파라메트가 여러개다 -> arraylist로 받아야 한다. (복수일 경우)
https://blog.thelumayi.com/24

# Controller 의 화면처리 
https://velog.io/@jwons44/Spring-%EC%9D%91%EB%8B%B5%EB%B0%A9%EC%8B%9D

Controller 와서 model 찍어넣고 화면 넘기기 -> 
View (DTO)
spring mvc - model (데이터 전달자)
model 객체는 컨트롤러에서 생성된 데이터를 담아서 JSP 에 전달하는 역할을 하는 존재다.
뷰(VIEW) 로 전달해야 하는 데이터를 담아서 보낼 수 있다

스프링 MVC에서 MODEL 을 이용한 데이터 전달 
public String home (model home){
	model. addAttribute("serverTime", new java.util.Date());
	return home;
}

@ModelAttribute 어노테이션 사용
강제로 전달받은 파라미터를 model 에 담아서 전달할 때 필요.
타입에 관계없이 무조건 model 에 담아서 전달됨
= 파라미터로 전달된 데이터를 다시 화면에서 사용해야 할 경우 유용하게 사용됨

전달받은 파라미터를 Model에 담아서 화면까지 전달하려 할 때 사용되는 어노테이션입니다.
ex) @ModelAttribute("받을값") 사용할 변수
@RequestParam + medel.addAttribute 처럼 작동
@ModelAttribute를 이용하면 커멘드 객체의 이름을 변경할 수 있고, 이렇게 변경된 이름은 뷰에서 커멘드 객체를 참조할 때 사용된다.

< RediretAttributes 객체 >
ex) return "redirect:http//www.naver.com";

스프링 Redirect 처리
return값에 "redirect:이동 url적기"
리다이렉트 이동시 파라미터 값을 전달하는 방법
ex) addFlashAttribute()
ResponseController.java
==================================================================================

< JSON 방식 이란 ? >
https://chb2005.tistory.com/99
JSON(JavaScript Object Notation)은 데이터를 저장/전송 할 때 많이 사용되는 형식
서버와 클라이언트 간의 통신에서 주로 많이 사용됨
아래와 같이 Key, Value 구조를 가짐

{
    "teamName" : "Tottenham",
    "league" : "Premier League",
    "ranking" : 5,
    "players" : [
        {
        "name" : "Son Heungmin",
        "backNumber" : 7,
        "age" : 30
        },
        {
        "name" : "Harry Kane",
        "backNumber" : 10,
        "age" : 29
        },
        {
        "name" : "Hugo Lloris",
        "backNumber" : 1,
        "age" : 36
        }
    ]
}

==================================================================================

ResponseController.java
https://mangkyu.tistory.com/49


==================================================================================
06-21 (금)

* CRUD 예제 해보기 (게시판 만들기)
https://velog.io/@yuns8708/%EA%B2%8C%EC%8B%9C%ED%8C%90-%EA%B8%B0%EB%B3%B8-CRUD-%EB%A7%8C%EB%93%A4%EA%B8%B0
https://bnzn2426.tistory.com/141#google_vignette
https://covenant.tistory.com/243

CRUD 이란?

